<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel='stylesheet' />
    <link href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css' rel='stylesheet' />
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute;top:75px;left: 300px; bottom: 0; width: 450px; height: 450px; }
        #geocoder-container {
            position: absolute;
            left: 10px;
            z-index: 1;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 3px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .start-marker {
            background-color: blue;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            cursor: pointer;
        }
        .end-marker {
            background-color: red;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            cursor: pointer;
        }
    </style>
    
    <title>Document</title>
</head>
<body>
    <h1>Book a Ride</h1>
    <div id="map"></div>
    <div id="geocoder-container">
        <div id="startGeocoder"></div>
        <button id="currentLocationButton" style="margin-top: 10px;">Use Current Location</button>
        <div id="endGeocoder" style="margin-top: 10px;"></div>
        <!-- onsubmit="handleSubmit(event)" -->
        <form id="rideForm" action="/requestRide" method="POST">
            <input type="hidden" id="startLat" name="startLat">
            <input type="hidden" id="startLng" name="startLng">
            <input type="hidden" id="endLat" name="endLat">
            <input type="hidden" id="endLng" name="endLng">
    
            <button type="submit">Submit</button>
        </form>
    </div>

    

    <script src='https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js'></script>
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js'></script>
    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiMTIzZ2F1cmF2IiwiYSI6ImNsd203MzFjcDFyeWYya215eno5NHpveGgifQ.HGwwKwppvbuFYvm5OSvTOQ'; // Replace with your Mapbox access token

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [78.9629, 20.5937], // Center of India [lng, lat]
            zoom: 4 // Starting zoom level for a better view of India
        });

        var startGeocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            placeholder: 'Enter starting location',
            countries: 'IN' // Restrict results to India
        });

        var endGeocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            placeholder: 'Enter destination location',
            countries: 'IN' // Restrict results to India
        });

        document.getElementById('startGeocoder').appendChild(startGeocoder.onAdd(map));
        document.getElementById('endGeocoder').appendChild(endGeocoder.onAdd(map));

        var startMarker, endMarker;

        async function getRoute(start, end) {
            const query = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`;
            
            const response = await fetch(query);
            const data = await response.json();
            const route = data.routes[0].geometry;
            
            if (map.getSource('route')) {
                map.getSource('route').setData(route);
            } else {
                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: route
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': '#3887be',
                        'line-width': 5,
                        'line-opacity': 0.75
                    }
                });
            }

            const bounds = new mapboxgl.LngLatBounds(start, start);
            bounds.extend(end);
            map.fitBounds(bounds, {
                padding: 50
            });
        }

        startGeocoder.on('result', function(e) {
            var start = e.result.geometry.coordinates;
            sessionStorage.setItem('start', JSON.stringify(start));
            document.getElementById('startLat').value = start[1];
            document.getElementById('startLng').value = start[0];
            if (startMarker) {
                startMarker.remove();
            }
            startMarker = new mapboxgl.Marker({ color: 'blue' })
                .setLngLat(start)
                .addTo(map);

            if (sessionStorage.getItem('end')) {
                var end = JSON.parse(sessionStorage.getItem('end'));
                getRoute(start, end);
            }
        });

        endGeocoder.on('result', function(e) {
            var end = e.result.geometry.coordinates;
            sessionStorage.setItem('end', JSON.stringify(end));
            document.getElementById('endLat').value = end[1];
            document.getElementById('endLng').value = end[0];
            if (endMarker) {
                endMarker.remove();
            }
            endMarker = new mapboxgl.Marker({ color: 'red' })
                .setLngLat(end)
                .addTo(map);

            if (sessionStorage.getItem('start')) {
                var start = JSON.parse(sessionStorage.getItem('start'));
                getRoute(start, end);
            }
        });

        map.on('load', function() {
            if (sessionStorage.getItem('start') && sessionStorage.getItem('end')) {
                var start = JSON.parse(sessionStorage.getItem('start'));
                var end = JSON.parse(sessionStorage.getItem('end'));
                startMarker = new mapboxgl.Marker({ color: 'blue' })
                    .setLngLat(start)
                    .addTo(map);
                endMarker = new mapboxgl.Marker({ color: 'red' })
                    .setLngLat(end)
                    .addTo(map);
                getRoute(start, end);
            }
        });

        document.getElementById('currentLocationButton').addEventListener('click', function() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var start = [position.coords.longitude, position.coords.latitude];
                    sessionStorage.setItem('start', JSON.stringify(start));
                    document.getElementById('startLat').value = start[1];
                    document.getElementById('startLng').value = start[0];
                    if (startMarker) {
                        startMarker.remove();
                    }
                    startMarker = new mapboxgl.Marker({ color: 'blue' })
                        .setLngLat(start)
                        .addTo(map);

                    startGeocoder.setInput(start);

                    if (sessionStorage.getItem('end')) {
                        var end = JSON.parse(sessionStorage.getItem('end'));
                        getRoute(start, end);
                    }

                    map.flyTo({
                        center: start,
                        zoom: 14
                    });
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        });
        function handleSubmit(event) {
            event.preventDefault();
        }
        document.getElementById('rideForm').addEventListener('submit', function(event) {
            var startLocation = JSON.parse(sessionStorage.getItem('start'));
            var endLocation = JSON.parse(sessionStorage.getItem('end'));
            if (startLocation && endLocation) {
                document.getElementById('startLat').value = startLocation[1];
                document.getElementById('startLng').value = startLocation[0];
                document.getElementById('endLat').value = endLocation[1];
                document.getElementById('endLng').value = endLocation[0];
            } else {
                event.preventDefault();
                alert("Please select both a start and end location.");
            }
            // event.preventDefault();
        });

        document.getElementById('rideForm').addEventListener('click', () => {
            const userId = '<%=currentUser%>';
            const socket = io();
            socket.on('connect', () => {
                console.log('Socket.IO connection established');
                // Function to send the location
                const sendLocation = () => {
                    const rider = 0;
                    const start = sessionStorage.getItem('start');
                    const end = sessionStorage.getItem('end');
                    const timestamp = new Date().toLocaleString("en-US", { timeZone: "Asia/Kolkata" });
                    // Send latitude and longitude to the server
                    // socket.emit('locationUpdate', { userId, start, end, timestamp, rider });
                    socket.emit('rideRequest', { userId, start, end, timestamp, rider });
                };
                sendLocation();
                // Send location every second
                // setInterval(sendLocation, 2000);
            });
            socket.on('message', (message) => {
                messageContent = message;
                console.log('Message from server:', message);
            });

            socket.on('error', (error) => {
                console.error('Socket.IO error:', error);
            });

            socket.on('disconnect', () => {
                console.log('Socket.IO connection closed');
            });
        });
    </script>
</body>
</html>